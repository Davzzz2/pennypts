eval(atob('const CSV_URL =
    'https://app.trevor.io/share/view/7794ab07-e8af-4386-a596-0a44a064109c/1d/pennygambl3r_Affiliate_Stake_com_Wager_Race_Statistics.csv?seed=29',
  prizesUnder75k = {
    1: 25,
    2: 20,
    3: 15,
    4: 10,
    5: 5,
    6: 1,
    7: 1,
    8: 1,
    9: 1,
    10: 1,
  },
  prizesOver75k = {
    1: 30,
    2: 27.5,
    3: 18,
    4: 10,
    5: 5,
    6: 1,
    7: 1,
    8: 1,
    9: 1,
    10: 1,
  }
let leaderboardStartDate = new Date('2024-12-29T00:00:00Z'),
  leaderboardEndDate = new Date(leaderboardStartDate)
leaderboardEndDate.setDate(leaderboardStartDate.getDate() + 7)
function updateCountdown() {
  const _0x4fa70c = document.getElementById('countdown')
  if (!_0x4fa70c || !leaderboardEndDate) {
    return
  }
  const _0x56a2bf = new Date(),
    _0x3f5c27 = leaderboardEndDate - _0x56a2bf
  console.log('Current Time:', _0x56a2bf)
  console.log('Leaderboard End Date:', leaderboardEndDate)
  console.log('Time Left:', _0x3f5c27)
  if (_0x3f5c27 <= 0) {
    leaderboardStartDate.setDate(leaderboardStartDate.getDate() + 7)
    leaderboardEndDate.setDate(leaderboardEndDate.getDate() + 7)
    updateLeaderboard()
    _0x4fa70c.innerHTML =
      '\n            <span class="label">Leaderboard has ended. New period starts in:</span>\n        '
    updateCountdown()
  } else {
    const _0xbe55e8 = Math.floor(_0x3f5c27 / 86400000),
      _0x4813d1 = Math.floor((_0x3f5c27 % 86400000) / 3600000),
      _0x18028a = Math.floor((_0x3f5c27 % 3600000) / 60000),
      _0x311ac0 = Math.floor((_0x3f5c27 % 60000) / 1000)
    _0x4fa70c.innerHTML =
      '\n            <span class="label">Leaderboard ends in:</span>\n            <span>' +
      _0xbe55e8 +
      'd ' +
      _0x4813d1 +
      'h ' +
      _0x18028a +
      'm ' +
      _0x311ac0 +
      's</span>\n        '
  }
}
async function fetchCSVData(_0x3ef35f) {
  try {
    console.log('Fetching CSV data from URL...')
    const _0x4bc14c = await fetch(_0x3ef35f)
    if (!_0x4bc14c.ok) {
      return (
        console.error(
          'Failed to fetch CSV data:',
          _0x4bc14c.status,
          _0x4bc14c.statusText
        ),
        []
      )
    }
    const _0x51f062 = await _0x4bc14c.text()
    return console.log('CSV Data fetched:', _0x51f062), parseCSV(_0x51f062)
  } catch (_0x5cb50f) {
    return console.error('Error fetching CSV data:', _0x5cb50f), []
  }
}
function parseCSV(_0x3c6124) {
  const _0x113fbd = _0x3c6124.split('\n').slice(1)
  return (
    console.log('CSV Rows:', _0x113fbd),
    _0x113fbd
      .map((_0x45fbfb) => {
        const [
          _0x27ade6,
          _0xc69c8f,
          _0x4e3102,
          _0x108f2e,
          _0x3fcf20,
          _0x366583,
          _0x272db6,
        ] = _0x45fbfb.split(',')
        if (
          !_0x27ade6 ||
          !_0x4e3102 ||
          !_0x108f2e ||
          !_0x3fcf20 ||
          !_0x366583
        ) {
          return null
        }
        return {
          affiliate_name: _0x27ade6,
          campaign_code: _0xc69c8f,
          user_name: _0x4e3102,
          wagered: parseFloat(_0x108f2e) || 0,
          rank: parseInt(_0x3fcf20) || 0,
          start_date_utc: _0x366583,
          end_date_utc: _0x272db6,
        }
      })
      .filter((_0x16ed0a) => _0x16ed0a !== null)
  )
}
async function updateLeaderboard() {
  try {
    const _0x38e6c7 = await fetchCSVData(CSV_URL)
    console.log('Parsed CSV Data:', _0x38e6c7)
    const _0x6d6aff = _0x38e6c7.sort(
      (_0x6af1f2, _0x515786) => _0x6af1f2.rank - _0x515786.rank
    )
    _0x6d6aff.length > 0 &&
      (populateTopRanks(_0x6d6aff), populateLeaderboard(_0x6d6aff))
  } catch (_0x72d58f) {
    console.error('Error updating leaderboard:', _0x72d58f)
  }
}
function populateTopRanks(_0x401ffb) {
  const _0x1d402b = _0x401ffb.slice(0, 3)
  _0x1d402b.forEach((_0x43d894, _0x5505b1) => {
    const _0x40e12c = _0x5505b1 + 1
    let _0xe8c6e4 = '$' + getPrize(_0x43d894.wagered, _0x43d894.rank).toFixed(2)
    ;(_0x40e12c === 1 || _0x40e12c === 2 || _0x40e12c === 3) &&
      (_0xe8c6e4 = '\uD83C\uDF81' + _0xe8c6e4)
    updateElement('user-' + _0x40e12c, _0x43d894.user_name)
    updateElement('wagered-' + _0x40e12c, '$' + _0x43d894.wagered.toFixed(2))
    updateElement('reward-' + _0x40e12c, _0xe8c6e4, false)
  })
}
function populateLeaderboard(_0x54cb42) {
  const _0x5204cc = document.getElementById('leaderboard-body')
  _0x5204cc.innerHTML = ''
  _0x54cb42.slice(3, 20).forEach((_0x1b2143) => {
    const _0x2a172b = document.createElement('tr')
    _0x2a172b.innerHTML =
      '\n            <td>' +
      _0x1b2143.rank +
      '</td>\n            <td>' +
      _0x1b2143.user_name +
      '</td>\n            <td>$' +
      _0x1b2143.wagered.toFixed(2) +
      '</td>\n            <td>$' +
      getPrize(_0x1b2143.wagered, _0x1b2143.rank).toFixed(2) +
      '</td>\n        '
    _0x2a172b.classList.add('fade-in')
    _0x5204cc.appendChild(_0x2a172b)
  })
  const _0x226ae1 = _0x54cb42.reduce(
      (_0x5dcae5, _0x5cb02a) => _0x5dcae5 + _0x5cb02a.wagered,
      0
    ),
    _0x3a2546 = new Date(_0x54cb42[0].start_date_utc).toLocaleDateString(),
    _0x452bcf = new Date(_0x54cb42[0].end_date_utc).toLocaleDateString()
  updateElement('week-info', _0x3a2546 + ' to ' + _0x452bcf)
  updateElement('total-wager', '$' + _0x226ae1.toFixed(2))
}
function getPrize(_0x5c5220, _0x1b1a36) {
  const _0x121c88 = _0x5c5220 >= 75000 ? prizesOver75k : prizesUnder75k
  return _0x121c88[_0x1b1a36] || 0
}
function updateElement(_0x527055, _0x515943, _0x4d3274 = true) {
  const _0xb07470 = document.getElementById(_0x527055)
  _0xb07470 &&
    (_0x4d3274 &&
      ((_0xb07470.style.animation = 'none'),
      _0xb07470.offsetHeight,
      (_0xb07470.style.animation = 'glitch 0.3s ease')),
    (_0xb07470.textContent = _0x515943))
}
setInterval(updateLeaderboard, 43200000)
updateLeaderboard()
const countdownInterval = setInterval(updateCountdown, 1000)
;(function () {
  const _0x229433 = document.createElement('script')
  _0x229433.async = true
  _0x229433.src = 'https://www.googletagmanager.com/gtag/js?id=G-DWN3WC4VHE'
  document.head.appendChild(_0x229433)
  window.dataLayer = window.dataLayer || []
  function _0x4187b4() {
    dataLayer.push(arguments)
  }
  _0x4187b4('js', new Date())
  _0x4187b4('config', 'G-DWN3WC4VHE')
})()
'));
